//
//  FinancialReportGeneratorTests.swift
//  FinanceMate-Sandbox
//
//  Created by Assistant on 6/2/25.
//

// SANDBOX FILE: For testing/development. See .cursorrules.

/*
* Purpose: Test-driven development tests for FinancialReportGenerator analytics and insights service in Sandbox
* Issues & Complexity Summary: TDD approach for comprehensive financial reporting and analytics capabilities
* Key Complexity Drivers:
  - Logic Scope (Est. LoC): ~120
  - Core Algorithm Complexity: High
  - Dependencies: 3 New (XCTest, financial data aggregation, report generation)
  - State Management Complexity: Medium
  - Novelty/Uncertainty Factor: Medium
* AI Pre-Task Self-Assessment (Est. Solution Difficulty %): 75%
* Problem Estimate (Inherent Problem Difficulty %): 70%
* Initial Code Complexity Estimate %: 72%
* Justification for Estimates: Financial analytics and report generation with data aggregation
* Final Code Complexity (Actual %): TBD - TDD iteration
* Overall Result Score (Success & Quality %): TBD - TDD iteration
* Key Variances/Learnings: TDD approach ensures robust financial analytics capabilities
* Last Updated: 2025-06-02
*/

import XCTest
import Foundation
@testable import FinanceMate_Sandbox

@MainActor
final class FinancialReportGeneratorTests: XCTestCase {
    
    var reportGenerator: FinancialReportGenerator!
    var sampleFinancialData: [FinancialData]!
    
    override func setUp() {
        super.setUp()
        reportGenerator = FinancialReportGenerator()
        sampleFinancialData = createSampleFinancialData()
    }
    
    override func tearDown() {
        reportGenerator = nil
        sampleFinancialData = nil
        super.tearDown()
    }
    
    // MARK: - Basic Initialization Tests
    
    func testFinancialReportGeneratorInitialization() {
        // Given/When: Generator is initialized
        let generator = FinancialReportGenerator()
        
        // Then: Generator should be properly initialized
        XCTAssertNotNil(generator)
        XCTAssertTrue(generator.generatedReports.isEmpty)
        XCTAssertFalse(generator.isGenerating)
    }
    
    // MARK: - Report Generation Tests
    
    func testGenerateExpenseReport() async throws {
        // Given: Report generator with sample data
        let generator = FinancialReportGenerator()
        
        // When: Generating expense report
        let report = await generator.generateExpenseReport(from: sampleFinancialData, period: .monthly)
        
        // Then: Should generate expense report
        XCTAssertNotNil(report)
        XCTAssertEqual(report.reportType, .expenses)
        XCTAssertGreaterThan(report.totalAmount, 0)
        XCTAssertGreaterThan(report.items.count, 0)
    }
    
    func testGenerateIncomeReport() async throws {
        // Given: Report generator with income data
        let incomeData = createSampleIncomeData()
        
        // When: Generating income report
        let report = await reportGenerator.generateIncomeReport(from: incomeData, period: .quarterly)
        
        // Then: Should generate income report
        XCTAssertNotNil(report)
        XCTAssertEqual(report.reportType, .income)
        XCTAssertGreaterThan(report.totalAmount, 0)
    }
    
    func testGenerateTaxReport() async throws {
        // Given: Report generator with tax-relevant data
        let taxData = createSampleTaxData()
        
        // When: Generating tax report
        let report = await reportGenerator.generateTaxReport(from: taxData, taxYear: 2025)
        
        // Then: Should generate tax report
        XCTAssertNotNil(report)
        XCTAssertEqual(report.reportType, .tax)
        XCTAssertEqual(report.period, .yearly)
        XCTAssertGreaterThan(report.deductions.count, 0)
    }
    
    // MARK: - Analytics Tests
    
    func testCalculateMonthlyTrends() async throws {
        // Given: Report generator with time-series data
        let timeSeriesData = createTimeSeriesData()
        
        // When: Calculating monthly trends
        let trends = await reportGenerator.calculateMonthlyTrends(from: timeSeriesData)
        
        // Then: Should calculate trends
        XCTAssertNotNil(trends)
        XCTAssertGreaterThan(trends.count, 0)
        XCTAssertNotNil(trends.first?.growthRate)
    }
    
    func testCategoryAnalysis() async throws {
        // Given: Report generator with categorized data
        let categorizedData = createCategorizedData()
        
        // When: Performing category analysis
        let analysis = await reportGenerator.analyzeCategoryBreakdown(from: categorizedData)
        
        // Then: Should return category analysis
        XCTAssertNotNil(analysis)
        XCTAssertGreaterThan(analysis.categories.count, 0)
        XCTAssertGreaterThan(analysis.totalCategorized, 0)
    }
    
    func testCashFlowAnalysis() async throws {
        // Given: Report generator with cash flow data
        let cashFlowData = createCashFlowData()
        
        // When: Performing cash flow analysis
        let analysis = await reportGenerator.analyzeCashFlow(from: cashFlowData, period: .monthly)
        
        // Then: Should return cash flow analysis
        XCTAssertNotNil(analysis)
        XCTAssertNotNil(analysis.netCashFlow)
        XCTAssertGreaterThan(analysis.inflows.count, 0)
        XCTAssertGreaterThan(analysis.outflows.count, 0)
    }
    
    // MARK: - Export Tests
    
    func testExportReportToPDF() async throws {
        // Given: Generated report
        let report = await reportGenerator.generateExpenseReport(from: sampleFinancialData, period: .monthly)
        
        // When: Exporting to PDF
        let pdfData = await reportGenerator.exportToPDF(report: report)
        
        // Then: Should generate PDF data
        XCTAssertNotNil(pdfData)
        XCTAssertGreaterThan(pdfData.count, 0)
    }
    
    func testExportReportToCSV() async throws {
        // Given: Generated report
        let report = await reportGenerator.generateExpenseReport(from: sampleFinancialData, period: .monthly)
        
        // When: Exporting to CSV
        let csvString = await reportGenerator.exportToCSV(report: report)
        
        // Then: Should generate CSV string
        XCTAssertNotNil(csvString)
        XCTAssertTrue(csvString.contains("Date"))
        XCTAssertTrue(csvString.contains("Amount"))
    }
    
    // MARK: - Report Management Tests
    
    func testSaveAndRetrieveReports() async throws {
        // Given: Generated report
        let report = await reportGenerator.generateExpenseReport(from: sampleFinancialData, period: .monthly)
        
        // When: Saving and retrieving report
        let reportId = await reportGenerator.saveReport(report)
        let retrievedReport = await reportGenerator.getReport(by: reportId)
        
        // Then: Should save and retrieve correctly
        XCTAssertNotNil(reportId)
        XCTAssertNotNil(retrievedReport)
        XCTAssertEqual(retrievedReport?.reportId, reportId)
        XCTAssertEqual(retrievedReport?.reportType, report.reportType)
    }
    
    func testListGeneratedReports() async throws {
        // Given: Multiple generated reports
        _ = await reportGenerator.generateExpenseReport(from: sampleFinancialData, period: .monthly)
        _ = await reportGenerator.generateIncomeReport(from: createSampleIncomeData(), period: .quarterly)
        
        // When: Listing reports
        let reports = reportGenerator.getGeneratedReports()
        
        // Then: Should return list of reports
        XCTAssertGreaterThanOrEqual(reports.count, 2)
    }
    
    // MARK: - Configuration Tests
    
    func testConfigureReportSettings() {
        // Given: Report generator
        let generator = FinancialReportGenerator()
        
        // When: Configuring settings
        generator.configureSettings(currency: "USD", dateFormat: "MM/dd/yyyy", includeCharts: true)
        
        // Then: Settings should be applied
        XCTAssertEqual(generator.configuration.currency, "USD")
        XCTAssertEqual(generator.configuration.dateFormat, "MM/dd/yyyy")
        XCTAssertTrue(generator.configuration.includeCharts)
    }
    
    // MARK: - Error Handling Tests
    
    func testHandleEmptyDataSet() async throws {
        // Given: Empty data set
        let emptyData: [FinancialData] = []
        
        // When: Generating report with empty data
        let report = await reportGenerator.generateExpenseReport(from: emptyData, period: .monthly)
        
        // Then: Should handle gracefully
        XCTAssertNotNil(report)
        XCTAssertEqual(report.totalAmount, 0)
        XCTAssertTrue(report.items.isEmpty)
    }
    
    func testHandleInvalidDateRange() async throws {
        // Given: Invalid date range
        let invalidData = createInvalidDateData()
        
        // When: Generating report with invalid dates
        let report = await reportGenerator.generateExpenseReport(from: invalidData, period: .monthly)
        
        // Then: Should handle invalid dates
        XCTAssertNotNil(report)
        // Should filter out invalid dates or handle appropriately
    }
    
    // MARK: - Helper Methods
    
    private func createSampleFinancialData() -> [FinancialData] {
        let calendar = Calendar.current
        let now = Date()
        
        return [
            FinancialData(
                amount: 150.00,
                currency: "USD",
                date: calendar.date(byAdding: .day, value: -1, to: now)!,
                vendor: "Office Supplies Store",
                category: "Office Expenses",
                documentType: .invoice,
                confidence: 0.95
            ),
            FinancialData(
                amount: 75.50,
                currency: "USD",
                date: calendar.date(byAdding: .day, value: -3, to: now)!,
                vendor: "Coffee Shop",
                category: "Meals & Entertainment",
                documentType: .receipt,
                confidence: 0.88
            ),
            FinancialData(
                amount: 500.00,
                currency: "USD",
                date: calendar.date(byAdding: .day, value: -7, to: now)!,
                vendor: "Software Subscription",
                category: "Software",
                documentType: .invoice,
                confidence: 0.92
            )
        ]
    }
    
    private func createSampleIncomeData() -> [FinancialData] {
        let calendar = Calendar.current
        let now = Date()
        
        return [
            FinancialData(
                amount: 5000.00,
                currency: "USD",
                date: calendar.date(byAdding: .month, value: -1, to: now)!,
                vendor: "Client Payment",
                category: "Income",
                documentType: .invoice,
                confidence: 0.98
            )
        ]
    }
    
    private func createSampleTaxData() -> [FinancialData] {
        return sampleFinancialData.filter { $0.category == "Office Expenses" || $0.category == "Software" }
    }
    
    private func createTimeSeriesData() -> [FinancialData] {
        let calendar = Calendar.current
        let now = Date()
        var data: [FinancialData] = []
        
        for i in 1...6 {
            let amount = Double(100 + i * 50)
            let date = calendar.date(byAdding: .month, value: -i, to: now)!
            data.append(FinancialData(
                amount: amount,
                currency: "USD",
                date: date,
                vendor: "Monthly Expense \(i)",
                category: "Regular Expenses",
                documentType: .receipt,
                confidence: 0.9
            ))
        }
        
        return data
    }
    
    private func createCategorizedData() -> [FinancialData] {
        return sampleFinancialData // Already categorized
    }
    
    private func createCashFlowData() -> [FinancialData] {
        var data = sampleFinancialData
        data.append(contentsOf: createSampleIncomeData())
        return data
    }
    
    private func createInvalidDateData() -> [FinancialData] {
        return [
            FinancialData(
                amount: 100.00,
                currency: "USD",
                date: Date(timeIntervalSince1970: -1), // Invalid date
                vendor: "Invalid Date Vendor",
                category: "Test",
                documentType: .receipt,
                confidence: 0.5
            )
        ]
    }
}